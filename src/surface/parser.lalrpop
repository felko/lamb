use crate::surface::lexer::{Token, Error};
use crate::surface::syntax::{Module, Decl, Type, Literal, Expr, Binding};

grammar<'src>(
    errors: &mut Vec<Error>
);

extern {
    type Error = Error;
    type Location = usize;

    enum Token<'src> {
        "(" => Token::LParen,
        ")" => Token::RParen,
        "<" => Token::LAngle,
        ">" => Token::RAngle,
        "," => Token::Comma,
        ":" => Token::Colon,
        "=" => Token::Equal,
        "->" => Token::Arrow,
        "=>" => Token::DoubleArrow,
        "+" => Token::Plus,
        "fun" => Token::Fun,
        "def" => Token::Def,
        "let" => Token::Let,
        "in" => Token::In,
        "if" => Token::If,
        "then" => Token::Then,
        "else" => Token::Else,
        "Int" => Token::Int,
        "Bool" => Token::Bool,
        Identifier => Token::Identifier(<&'src str>),
        Number => Token::Number(<i32>),
        "true" => Token::True,
        "false" => Token::False,
    }
}

Box<T>: Box<T> = T => Box::new(<>);

Comma<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
};

TypeParamList: Vec<&'src str> = "<" <type_params: Comma<Identifier>> ">" => type_params;

TypeParamsOpt: Vec<&'src str> = <type_params_opt: (TypeParamList)?> => type_params_opt.unwrap_or_else(|| Vec::new());

Decl: Decl<'src> = {
    "def" <name: Identifier> <type_params: TypeParamsOpt> <params: (Binding)*> <return_type: (Annotation)?> "=" <body: Expr> => Decl::Func {name, type_params, params, return_type, body },
}

pub Module: Module<'src> = {
    <decls: (Decl)*> => Module { declarations: decls },
}

Type: Type<'src> = Type0;

FuncTypeParam: Type<'src> = <Type1> "->";

Type0: Type<'src> = {
    <params: (FuncTypeParam)*> <ret: Box<Type1>> =>
        if params.is_empty() {
            *ret
        } else {
            Type::Func(params, ret)
        },
}

Type1: Type<'src> = {
    "Int" => Type::Int,
    "Bool" => Type::Bool,
    <name: Identifier> => Type::Name(name),
    "(" <Type0> ")" => <>,
}

Annotation: Type<'src> = {
    ":" <t: Type> => t
}

Binding: Binding<'src> = {
    <name: Identifier> => Binding::Inferred(name),
    "(" <name: Identifier> <ann: (Annotation)?> ")" => match ann {
        Some(t) => Binding::Typed(name, t),
        None => Binding::Inferred(name),
    },
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Literal: Literal = {
    <x: Number> => Literal::Int(x),
    <b: Bool> => Literal::Bool(b),
}

Expr = Expr0;

Expr0: Expr<'src> = {
    "fun" <params: (Binding)+> "=>" <body: Box<Expr0>> => Expr::Abs(params, body),
    "let" <name: Identifier> <type_params: TypeParamsOpt> <params: (Binding)*> <return_type: (Annotation)?> "=" <body: Box<Expr0>> "in" <cont: Box<Expr0>> => Expr::Let {name, type_params, params, return_type, body, cont },
    "if" <cond: Box<Expr0>> "then" <then: Box<Expr0>> "else" <else_: Box<Expr0>> => Expr::If {cond, then, else_ },
    <Expr1>,
}

Expr1: Expr<'src> = {
    <expr: Expr2> <ann: (Annotation)?> =>
        match ann {
            Some(type_) => Expr::Ann(box expr, type_),
            None => expr
        },
}

Expr2: Expr<'src> = {
    <lhs: Box<Expr2>> "+" <rhs: Box<Expr3>> => Expr::Add(lhs, rhs),
    <Expr3>,
}

Expr3: Expr<'src> = {
    <callee: Box<Expr4>> <args: (Expr4)+> => Expr::App(callee, args),
    <Expr4>,
}

Expr4: Expr<'src> = {
    Literal => Expr::Lit(<>),
    Identifier => Expr::Var(<>),
    "(" <Expr0> ")" => <>,
}
